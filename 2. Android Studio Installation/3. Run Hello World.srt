1
00:00:02,000 --> 00:00:04,000
Let's compile the Hello World app.

2
00:00:04,000 --> 00:00:15,000
Go to GitHub, and download the repository. You can either get the ZIP file or use git clone.

3
00:00:15,000 --> 00:00:25,000
I like to use git clone, so I go to the terminal and create a directory for it.

4
00:00:25,000 --> 00:00:34,000
Verify that we have downloaded everything, and then go back to Android Studio.

5
00:00:34,000 --> 00:00:44,000
Import the project into Android Studio. Choose the top-level directory, android-hello-world.

6
00:00:44,000 --> 00:00:51,000
It may ask you to register the VCS root. That just means that we will have version control integration.

7
00:00:51,000 --> 00:01:01,000
Go ahead and add that. After that, open the Project tab from the left, and choose the Project perspective.

8
00:01:01,000 --> 00:01:10,000
This will reflect your file with the same structure as on disk.

9
00:01:10,000 --> 00:01:17,000
We will look into the actual code later. First, let's get it running on the emulator.

10
00:01:17,000 --> 00:01:24,000
To do that, we will need to create an emulator. Click on this purple button.

11
00:01:24,000 --> 00:01:29,000
To create a virtual device, we need to decide the size, resolution, and density.

12
00:01:29,000 --> 00:01:34,000
At this point it doesn't really matter, so I'm just going to choose the first one.

13
00:01:34,000 --> 00:01:41,000
Next, we need to decide what operating systems to load onto our emulator.

14
00:01:41,000 --> 00:01:48,000
Choose the highest API level. In this example, we have Marshmallow level 23.

15
00:01:48,000 --> 00:01:56,000
Within Marshmallow, there are two variants, the one that says with Google APIs, and the one without.

16
00:01:56,000 --> 00:02:01,000
Choose with Google API so that it will come with things like Google Maps.

17
00:02:01,000 --> 00:02:11,000
Within that, you still have 3 choices, 2 of which is the x86 architecture, and 1 is the arm architecture.

18
00:02:11,000 --> 00:02:20,000
In general, the x86 version runs faster, so which one out of those to pick?

19
00:02:20,000 --> 00:02:24,000
That depends on whether you have a 32-bit machine or a 64-bit machine.

20
00:02:24,000 --> 00:02:35,000
To find out, use the terminal. You can launch the system terminal, or you can use the one integrated with Android Studio.

21
00:02:35,000 --> 00:02:46,000
Let me show you how. Close the Virtual Device Manager, and go to the bottom to open Terminal.

22
00:02:46,000 --> 00:03:01,000
Type uname -a. In our example it says x86_64, meaning that this is a 64-bit machine.

23
00:03:01,000 --> 00:03:14,000
We can go ahead and choose to download that version. This will take a while.

24
00:03:14,000 --> 00:03:20,000
Once the download finishes, you can go ahead and use that particular system image in your emulator.

25
00:03:20,000 --> 00:03:30,000
After the emulator has been created, go ahead and launch it. I'm going to put the emulator side-by-side with

26
00:03:30,000 --> 00:03:38,000
Android Studio so you can see what happens. To compile and run our app, click the green triangle.

27
00:03:38,000 --> 00:03:44,000
Here you can see that Android Studio has detected that we have an emulator running.

28
00:03:44,000 --> 00:03:50,000
I usually check the box so that we use the same device all the time, and I don't have to choose a device

29
00:03:50,000 --> 00:04:00,000
every single time. Here we are, Hello World. Next let's try to run the same app on a real device.

30
00:04:00,000 --> 00:04:07,000
To deploy your app to a real device, we need to enable developer options so that we can turn on USB debugging.

31
00:04:07,000 --> 00:04:15,000
Go to Settings. Scroll all the way down until you see About phone.

32
00:04:15,000 --> 00:04:24,000
Go to About phone, scroll all the way down to Build number, tap Build number seven times.

33
00:04:24,000 --> 00:04:32,000
It will tell you that you are now a developer. Go back and tap on Developer options.

34
00:04:32,000 --> 00:04:44,000
Switch it on. Scroll down to enable USB debugging. With all that, we can go back to Android Studio and plug

35
00:04:44,000 --> 00:04:52,000
in the phone. To double-check that everything is set up properly, I am going to show you how to use ADB,

36
00:04:52,000 --> 00:05:02,000
or Android Debug Bridge. Go to Android Studio, Preferences, and search for Android.

37
00:05:02,000 --> 00:05:16,000
Copy the path of the SDK. Then go to the terminal, paste in the path of the SDK, and add platform-tools/adb.

38
00:05:16,000 --> 00:05:25,000
If you are on Windows, add adb.exe. This is the full path of the ADB command.

39
00:05:25,000 --> 00:05:31,000
If you're going to do a lot of Android development, you may want to add that to your path.

40
00:05:31,000 --> 00:05:37,000
ADB is very handy to figure out the status of your app and your device.

41
00:05:37,000 --> 00:05:46,000
After adb, press space, devices. Before you plug in your phone, it will show nothing.

42
00:05:46,000 --> 00:05:53,000
Now let's plug in our phone. A dialog will show up on your phone asking you if you trust this computer.

43
00:05:53,000 --> 00:06:05,000
Check the checkbox, and click OK. Then run adb devices again. This time you should see your phone.

44
00:06:05,000 --> 00:06:13,000
With that, you can click the green triangle again. This time, instead of the emulator, you will see your

45
00:06:13,000 --> 00:59:00,000
device in the Device Chooser. Here we go, Hello World on your phone.

